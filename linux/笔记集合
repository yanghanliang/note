-----------------------------------静态化-----------------------------------

静态化
一、介绍
1、缓存介绍
1）浏览器缓存：
是保存在浏览器端的缓存，这个缓存我们没有办法控制。在360等卫士的清理下，缓存的时间也是没有保证的。这个缓存默认是保存多少？根据浏览器的不同有所不同。我们可以设置web服务器通知浏览器进行保存！！

2）PHP端的缓存：
①：程序缓存（冲）：这是一个PHP自带的缓存机构，我们（程序员）是没有办法控制的。只能知道有这么一个东西，他在操作中起着重要的作用。

②：ob缓存（冲）：这个比程序缓存高级一点，高级的原因是我们可以操作它！在它的上面完成静态化的工作。也可以根据你的想像力，实现它可以实现的功能。

③：内存缓存：memcached 或者 redis 来实现的。这二个工具，都是把数据放在内存里面，让PHP来进行访问的。可以减少我们对 mysql 的请求次数，提高网站的性能。而且 redis 或者 memcached 请求连接，获取数据的速度，就是比Mysql快。


 
总结：ob缓存，就像在长江上面的水坝。php代码中的echo.就是长江源。输出的内容，肯定会流向离它最近的水坝里面。当水坝销毁的时候，就会继续向下一个水坝流去。。

2、静态化介绍
由ob缓存生成的静态化概念，叫做真静态化。
真静态就是把PHP动态生成的内容，生成HTML文件。这个时候由于PHP输出的内容都在ob缓存里面，我们可以获得里面的数据，保存成一个HTML文件。

真静态的优化：就是可以提升访问量，HTML页面的性能比PHP好。也是由于HTML页面，可以被搜索引擎收录！

由于真静态的概念，就出现了伪静态的概念。
伪静态就是由web服务器实现的功能，从URL的访问方式来看，就是访问一个静态的页面。通过WEB服务器的路由规则，把访问的页面，重新定向到PHP动态页面，这就是伪静态。

伪静态的实现，也是为了提升搜索引擎的收录。

整个搜索引擎对HTML页面，也就是静态页面，非常喜欢。收录的非常的快。
搜索引擎：百度，搜狗，360.
如果你的内容要在搜索引擎里面被找到，你的网页内容必需提前被搜索引擎收录。没有收录的是没有办法搜索到的。

URL访问示例：
http://www.moumou.com/index.html

使用真静态的时候：
就真的有一个index.html页面，可以被直接访问到

使用伪静态的时候：
就真的没有一个Index.html页面，这个时候，通过web服务器的路由规则，重新定向到一个你想定向的网页。比如search.php，比如index.php也可以。定向到谁，能定向到谁，根据你的想像力。

3、压力测试软件介绍
1）压力测试软件，我们介绍的是ab：
在我们的apache的bin目录里面。apache自带的。使用它就可以了。在windows里面与centos里面，使用方式都是一样的。

压力测试软件，不只ab这一种，ab这种压力测试软件，是非常的简单的。还有很多复杂的。

根据不同的业务需求选择，不一样的压力测试软件。


2）找到我们的压力测试软件：
 

3）查看它的使用方式：
 
 
-n ：我们的总请求数。
-c ：并发请求

4）测试一下这二个参数：
 

5）介绍里面的内容：
 
6）重点的说明：
最重要的就是我们的QPS，这个值，非常的重要。我们的服务器去请求的时候。这个值越大越好。我们以后去面试的时候，你要说你网站的性能怎么样，你就可以介绍你写的代码，QPS是多少。
QPS是4000，证明你的服务器，能够同时接收处理4000个请求。

优化网站的时候，我们就应该让这个值，越来越大。

测试的时候：
让你的服务器IO不成为问题，网络带宽不成为你的问题。

公司里面：我们的公司都在专门的测试服务器。这个时间，这二个问题都给你解决了，让你把代码写好就可以了。

公司里面，进行代码测试是必要的手段。测试完成之后，你的写报告，把测试的结果，与用意说明白。发送邮件给你的上司的。

公司里面，没有要求测试的，你自己写的东西。在测试。请也要写一份测试报告，发在领导看得见的地方。

认识：压力测试软件有很多，ab是目前我感觉最简单的。


7）写好二个页面：一个是html静态的，一个是php动态的
九九乘法表：js
 

九九乘法表：php
 

8）测试一下我们的静态页面的QPS:
 
 
QPS已经是1939.86了。。

9）测试一个我们的动态页面的QPS：
 
 
QPS已经昌87.38

10）我们的测试，绝对不是一次性的。必需要多次测试。找出大概的值。
我们必需要经常多次测试来取得值，然后总结出来。写成报告！！
11）总结：
我们的html页面，总得来说，是要比php快一些。
二、真静态化
1、ob缓存原理
图：
 

图：ob缓存关闭的情况：
 

2、ob缓存函数实践
 

 
ob_start ：开启ob缓存
ob_flush ：刷新我们的ob缓存里面的数据到下一个缓存
ob_clean ：清空我们的ob缓存。把ob缓存里面的数据给干掉！
ob_get_contents ：获得ob缓存里面的数据

ob_end_flush ：关闭ob缓存，并且把数据内容给下一个缓存
ob_end_clean ：关闭ob缓存，并且删除数据

ob_get_level ：获得ob缓存的级别

3、ob缓存实现静态化
1）找到为什么默认会有一个ob缓存：
查看配置文件：
 
修改成off：
 

测试一下：我们的ob缓存关闭没有：
 
访问：
 

2）把php.ini的配置文件，修改成曾经的样子：
 
保存：
 
访问：
 
确实默认的就是一个ob缓存！！

注意：修改了php.ini请重启我们的apache！！

3）写几个代码：
 
 
4）写几个代码：
 
访问它：执行完成123456
 

5）写几个代码：
 
访问一下它：
 

6）再写几个代码：
 
访问效果：
 
回调就可以任你相像了。

7）再写几个代码：
 
访问效果：
 
8）写一个有趣的：
 

 
9）在我们不关闭ob默认缓存的时候，怎么实现上面的效果：
 
访问效果：
 

10）一个重要的事件：header
header ：设置的时候，是在修改什么内容？
header是修改的http协议的内容。

代码示例：
 
访问一下：
 

修改一下代码：
 
 
重点：
我们在使用header的时候，这个设置信息是直接就到我们的程序缓冲的里面的。这个时候，我们必需的保证我们的header前面是没有任何数据的。

如果我们关闭了ob缓存，当我们输出内容的时候，有默认的头信息，就已经设置了。设置之后，我们输出的内容也到了我们的程序缓冲里面去了。这个时候在设置header信息。我们的header前面就有了数据。就不能覆盖我们的默认的header信息了。就要报错。

4、静态化文件的生命周期
1）生成我们的真静态页面：
准备我们的代码：
 
2）访问页面：
 
查看我们的保存的页面：
 
查看我们的内容：
 

3）我们来设置一下我们的工作场景：
①：我们后台网站的后台，都有一个按钮，点一下，就是对整个网站，应该生成我们的静态页面，进行全部重新生成。

②：我们通过代码自行检查，如果有就使用静态的，如果没有就重新生成静态。我们为了防止我们的代码更新，我们就要设置这个静态页面的时间。静态页面有过期时间。

③：工作中，很多时候，都是静态页面与我们动态的页面，一起使用。因为我们现在很多网站都需要数据交互。数据交互直接使用我们纯静态，就没有交互了。

4）过期时间：
 
不过期：
 

5）我们的文件检查时间函数：filemtime()
要检查这个文件，必需确认这个文件是存在：file_exists()

6）代码实现：
 
访问一下它：
重新生成的999.html:
 
使用的静态化的页面：
 

7）总结：
我们静态化的页面，平时只有在变化不大的页面，才会使用的。变化太大，经常生成静态化页面，也是不对的。如果我们有数据交互，你要生成静态页面，也是不对的。

假如我们的商品，现在是9块，已经生成静态页面，第二天修改成了10块。这个时候，就必需要重新生成静态化页面。


三、伪静态化
1、rewrite的介绍
使用了apache的rewrite规则来实现的效果。是通过apache接收到url之后，去判断这个url。通过判断的结果，重新定向到新的地址，或者新的文件。

这个功能web服务器都是存在的。但是每个web服务器都有一些区别。所以我们理解这些概念，用其它不同的web服务器的时候，就可以做相应的配置了。

比如：http://www.moumou/index.html
通过apache的路由规则，实现访问的页面是index.php的。

2、rewrite的配置
1）这个软件是我们工作中非常重要的：
 
2）这个就是一个压缩包，双击它，就可以解压出来
 
3）一个全新的软件，一定要看说明：
 
教程：
 

4）操作一下：
 
请不要使用这里面的快捷方式！
因为很多同学，现在还不知道配置文件的位置，使用快捷方式，遗忘的更快。

我们要修改配置，必需去配置文件里面去操作。等你大牛了，才使用这些快捷方式！

5）apache的目录：
 
我们看见了有3个web服务器。我们只选择apache即可。iis这个是中奖的东西。nginx在windows上面支持的不太好。所有不要使用。

6）选择的php版本，都有对应的php目录，你正在使用哪一个php版本，就选择哪一个php目录，即可：
 

7）我们的mysql：只有一个mysql版本
 

8）apache主配置的查找：
 
我们的apache必需先加载这个文件！才能加载其它的副配置文件。因为主配置文件里面引入了副配置文件。如果没有引入，副配置文件，是不管用的。

9）打开我们的主配置文件：
 
10）查看我们的这个引入的文件：
 
11）再打开我们之前的独立apache引入的虚拟主机配置文件：
 

12）对这二个文件进行说明：
这个是我配置的：
 
我们发现，二个文件，目录不一样。文件名不一样。但是他们可以做相同的事情。
重点：我们的文件是因为它的内容，决定了它的作用的。并不是它的外在，内在才是他作用的体现。

13）配置我们的内容：快速的配置虚拟主机
 
假如：我们的虚拟主机没有localhost的时候，我们默认使用Localhost的访问的是哪一个主机：默认访问的是第一个

所以上面的配置习惯是我个人的。我会把localhost配置到第一个，而且是默认的web站点目录。方便以前的程序的访问！！

14）快速的配置第二虚拟主机：
 
把第一个复制下来，然后到servername修改成自己的域名即可。

这个域名，必需要在本地的hosts文件里面，配置才能访问的到！
修改hosts文件：
文件地址是：
C:\Windows\System32\drivers\etc
 

15）DNS的配置：
我们的域名，没有买的时候，自己随便写的。只能在自己的本地进行访问。不能在公网（internet）上面进行访问。因为我们随便写的这个域名，没有注册到我们公网的dns服务器上面。

现在的域名很便宜，买了之后我们的运营商，会帮助你把它注册到公网的dns服务器上面，这个时候，你的域名，才可以在公网进行访问。。

dns注册的，只需要2个小时左右就可以了。

域名为什么有贵的，有便宜的？
总结：很多人都认为贵的，它就贵了。大家都认为它便宜的，就便宜的。

dns的图解：
 
dns服务器，就是我们的域名与ip地址的对应表。通过域名，找到ip地址，就可以快速的定位到我们服务器的位置！

根dns服务器，全球只有13台。上面全是域名的对应规则。根据这些规则，就可以找到指定的顶级服务器。

DNS服务器：
	国内三大运营商提供的DNS服务器：114.114.114.114
	国外的google提供的dns服务器：8.8.8.8

16）开启我们的rewrite模块：
打开我们的apache的主配置文件：
 
重启apache就可以了。
 

17）我们的虚拟主机配置内容进行说明：
	<Directory />
	    Options +Indexes +FollowSymLinks +ExecCGI
	    AllowOverride All
	    Order allow,deny
	    Allow from all
	    Require all granted
	</Directory>
Options  ：固定的值，必需写。它后面的才是参数
	Indexes ：注意2.4版本的前面必需要带+或者-
		+ ：访问不到我们的页面的时候，显示我们的目录
-: 访问不到我们的页面的时候，不显示我们的目录
工作中请选择：-号。
看看效果：
 
访问效果如下：
 

看看使用-号的效果：
 
访问效果如下：
 
+FollowSymLinks ：说明：
	这个是让我们的apache支持链接，但是亲测，这个如果是-号对有些图片格式，有影响的。所有直接使用+即可。

+ExecCGI ：支持cgi模块，让我们的apache支持一些扩展的。

AllowOverride All ：这个是设定，我们的apache支不支持我们分布式.
	all支持分布式配置。none不支持分布式配置。
	在工作中，只要使用apache，那大多数都是需要分布式文件支持的。
	(.htaccess) ：这个文件就是分布式文件。它的作用，就是可以把这个文件，放在项目的目录里面。让我们的项目，可以指定不同的项目，配置apache的不同的功能。分布式的好处，就是修改这个分布式文件，不需要重启我们的apache

Order allow,deny
Allow from all
	这二个是2.2版本的权限控制。可以控制，那些ip地址可以访问我。

Require all granted 
	这一个是2.4版本的权限控制。可以控制，那些Ip地址可以访问我。

18）创建我们的分布式文件：
只能通过我们的编辑器，才能创建这个文件！
 

3、.htaccess文件：RewriteRule
1）配置判断rewrite模块是否开启：
 
2）使用我们的rewrite模块 ：
 
3）写第一条规则：
url地址访问index.html页面的时候，我们使用规则，把它转发到index.php里面去：
index.html不存在，index.php存在的

检查了一下，修改一下我们的虚拟主机：
 
在www.rewrite.com里面进行rewrite模块 的测试：
 

4）创建index.php页面：
 
5）重启一下我们的apache
 

6）规则的写则：
 
访问效果：
 

7）再次写规则：
 
访问一下：
 
302是临时重定向！！这个规则的写法是有问题。

修改这个规则写法：
 
访问一下：
 

8）再次修改规则：301永久重定向
 
访问一下：
 
介绍：
302是临时重定向，我们的浏览器会接收到重定向的地址，然后再一次请求。这个时候浏览器上面的url地址，就修改成了重定向的地址。

301是永久重定向，我们的浏览器会接收到重定向的地址，然后再一次请求。这个时候浏览器上面的url地址，就修改成了重定向的地址。

9）永久重定向之后，还能再访问吗？
永久重定向之后，我们的重定向地址的数据，保存到了浏览器中。所有我们不清除浏览器的保存数据。这个地址，就不会是新的地址。。

清除地址：
 
现在就明白301永久重定向是怎么实现了吗？
10）带参数的访问：
 
 
11）不写QSA的效果：
 
 
还是可以接收到参数的。。

12）QSA与R组合操作：
 
访问一下：
 

13）我们在规则使用正则：
 
访问：
 

4、.htaccess文件：RewriteCond
rewritecond ：这个就是引用我们的apache获取的服务器的信息。
 
访问效果：
 

1）写一个工作中的写法：去掉入口文件：
 
访问：
 
2）referer：来源
请求，如果不是我的来源，就访问失败
 
说明：
当我们访问某一个网站的时候。我们的访问的首页，是没有来源。因为它是直接访问。来源是通过我们访问的这个页面，然后再次请求的其它页面，这个时候就有来源。来源就是我们直接访问的这个页面的URL！！


5、经典功能-防盗链
我们的网站有很多的资源，这些资源都是你辛苦获得的。
这个时候，别人想直接在它的网站上连接你的资源地址，就直接在它的网站上显示了。你网站的资源。这个时候。你肯定就不愿意了。

防盗链，就是为了让别人没有办法使用我们的资源，只有自己才能使用。

别人链接你，到底好不好？
有人链接你，请求量就上来了。请求量上来了，是不是可以去融资！
但是同一个人使劲的访问你。这个用户的价值是不高的。因为这个用户，没有什么花钱，每次都来请求你的资源。不能给你提供什么信息。

很多人都在共享这些资源，给图片打个水印，你访问来，就拿去呗。图片上面，就有我网站的地址。

只要别人来链接，你想着办子，把连接你的资源的信息，告诉别人，这个资源是谁的就行。

很多网站都在提供，共享的使用空间。有一段时间，我们的百度网盘都是可以直接把图片放在里面的，然后你的网站可以直接调用的。现在要收费！！

1）防止，可以直接返回一张调皮的图片！
返回资源给别人，这个流量是要走的，钱算自己的。

2）防止，连接我的资源的时候，直接给你返回一个403，没有权限


3）准备二个网站：
盗链，就是一个网站，访问另一个网站的资源！
www.rewrite.com是资源网站；
localhost是盗链网站；


4）资源网站的准备：
 
在这里准备一个自我展示的页面：
 
访问一下：
 
5）盗链网站：
准备一个页面，访问我们的资源网站：
 
访问一下这个页面：
 
6）资源网站发现了，我的资源被盗用：
缴网费的时候，流量钱，太多了。
防盗链：返回盗用者：403的错误信息：
 

7）盗用者的localhost访问页面：
 

8）资源网站，自己访问自己的：
 

9）返回一个调皮的操作：返回一个图片！
资源服务器操作的
 
10）使用资源服务器，进行操作：
 

11）使用盗用者：localhost进行访问：
 


123 456 hr 654

##
svn 上传代码后需要在服务器上更新才行  svn up





